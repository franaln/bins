#!/bin/bash

# Olgaaa  -  "One menu to rule them all"
#
# Usage: olgaaa [option]    
# Options available: apps, windows, power, calc, config, home, find, screen. If not option is provide, it will show the options availables.
# Maybe is a good idea to assign a keybind for each option
#
# Needs dmenu patched with the qxyw patch

# dmenu config
font=Segoe-12
sf_color=#dedede
sb_color=#534eb4
nf_color=#dedede
nb_color=#2a2a2a
height=28

# olgaaa config
cachedir="$HOME/.cache/olgaaa"
open="ow"
fm="dolphin"


# Center dmenu in the screen
xres=`xdpyinfo | grep 'dimensions:' | awk '{print $2}' | cut -dx -f1`
width=$[$xres * 1 /3]
xpos=$[$xres / 2 - $width / 2]
yres=`xdpyinfo | grep 'dimensions:' | awk '{print $2}' | cut -dx -f2`
ypos=$[$yres / 2 - $height / 2]       


# Execute dmenu with the specific options. Takes the prompt as an option
function xdmenu()
{
    dmenu -i -l 10 -fn "$font" -sf "$sf_color" -sb "$sb_color" -nf "$nf_color" -nb "$nb_color" -h "$height" -w "$width" -y "$ypos" -x "$xpos" -p $1
}


option=""
# If there is no input show options...
if [ $# -eq 0 ] ; then
    launcheropts="apps\nexplore\npower\nscreen\nfind\ncalc\numount\nwindows"
    choice=$(echo -e $launcheropts | xdmenu "OLGAAA!")
    if [ "$choice" == "" ] ; then
	    exit 1
    else
	    option=$choice
    fi

# Else go to the correspondig option
else
    option=$1
fi


# Different launcher options
case "$option" in
    
    ## Change window
    windows)
	    
	    win=`wmctrl -l | colrm 1 19 | sed '/tint2/d' | xdmenu "windows"`
	    
	    if [ "$win" == "" ] ; then
	        exit
	    elif [ "$win" == "Desktop" ] ; then
	        wmctrl -k on
	    else
	        wmctrl -a $win
	    fi
	    ;;
    
    
    ## Power options
    power)
	    
	    poweropts="lock\nlogout\nsuspend\npoweroff\nreboot\nhibernate"
        
	    choice=$(echo -e $poweropts |  xdmenu "power")
	    
	    if [ "$choice" = "" ] ; then
	        exit 1
	    elif [ "$choice" = "logout" ] ; then
	        openbox --exit
	    elif [ "$choice" = "lock" ] ; then
	        xscreensaver-command --lock
	        exit 0
	    else
	        systemctl $choice
	        exit 0
	    fi
	    ;;
    
    
    ## Open apps. Show recent apps first
    apps)
	    
	    max_recent=50 # Number of recent commands to track
	    recent_cache="$cachedir/apps_recent"
	    rest_cache="$cachedir/apps_all"
        
	    mkdir -p $cachedir
	    touch $recent_cache
        
	    IFS=:
	    if stest -dqr -n "$rest_cache" $PATH; then
	        stest -flx $PATH | sort -u | grep -vf "$recent_cache" > "$rest_cache"
	    fi
        
	    IFS=" "
	    cmd=$(cat "$recent_cache" "$rest_cache" | xdmenu "apps") || exit
        
	    if ! grep -qx "$cmd" "$recent_cache" &> /dev/null; then
	        grep -vx "$cmd" "$rest_cache" > "$rest_cache.$$"
	        mv "$rest_cache.$$" "$rest_cache"
	    fi
	    echo "$cmd" > "$recent_cache.$$"
	    grep -vx "$cmd" "$recent_cache" | head -n "$max_recent" >> "$recent_cache.$$"
	    mv "$recent_cache.$$"  "$recent_cache"
        
	    ($cmd  | ${SHELL:-"/bin/sh"} &)
	    ;;
    
    
    ## Calculator
    calc)
	    xsel -o | xdmenu "calc" | xargs echo | calc | sed "s/\t//g" | xdmenu "result" | xsel -i
	    ;;
    
    
    ## Search files
    find)
	    input=$(xdmenu "search")
	    result=""
	    if [ "$input" != '' ] ; then
	        result=$(echo "$input" | locate -e -r "$input" | xdmenu "result" )
	    fi
	    
	    if [ "$result" != "" ] ; then
	        exec $open "$result"
	    fi
	    ;;
    
    
    ## Screen/VGA/HDMI options
    screen)
        
	    devices=$(xrandr -q | grep [[:upper:]]1)
        
	    availableopts="Laptop only"
        
	    if [[ $devices == *"VGA1 connected"* ]] ; then
	        availableopts+="\nVGA only\nLatop & VGA"
	    fi
	    
	    if [[ $devices == *"HDMI1 connected"* ]] ; then
	        availableopts+="\nHDMI only\nHDMI & Laptop"
	    fi
        
	    choice=$(echo -e $availableopts | xdmenu "screens")
        
	    case "$choice" in
	        "Laptop only")
		        xrandr --output eDP1 --auto
		        xrandr --output HDMI1 --off
		        xrandr --output VGA1  --off
		        ;;
	        "VGA only")
		        xrandr --output VGA1  --auto
	    	    xrandr --output eDP1  --off
		        xrandr --output HDMI1 --off
		        ;;
	        "HDMI only")
		        xrandr --output HDMI1 --auto
		        xrandr --output VGA1  --off
	    	    xrandr --output eDP1  --off
		        ;;
	        "Laptop & VGA")
	    	    xrandr --output eDP1  --auto
		        xrandr --output VGA1  --auto
		        xrandr --output HDMI1 --off
		        ;;
	        "Laptop & HDMI")
	    	    xrandr --output eDP1  --auto
		        xrandr --output HDMI1 --auto
		        xrandr --output VGA1  --off
		        ;;
	    esac
	    exit 0 
	    ;;
	
    # mount)
    
    #  	choice=$(cat /proc/partitions | grep -o sd[[:alpha:]] | grep -v major | grep -v "sda" | xdmenu "mount")
    
    # 	if [[ $choice == "" ]] ; then
    # 	    exit 1
    # 	else
    # 	    sudo mount $choice /run 
    
    umount)
        
        choice=$(mount | awk '$3 ~ /\/media\// || /\/mnt\// { print $3 }' | xdmenu "umount")
    
        if [[ $choice ]]; then
            sudo umount $choice
        else
            exit 0
        fi
        ;;


    # Explore files
    explore)
	
	cd "$HOME"

	choice=1
	while [ "$choice" ]; do
        
	    choice=$((echo ".." ; ls $PWD ; echo "[Open]") | xdmenu ">$(basename $(pwd))")
        
	    if [ "$choice" ] ; then
		    
		    # change dir by hand
		    if [[ "$choice" == "cd "* ]] ; then
		        goto=$(echo $choice | cut -d ' ' -f 2)
                
		        if [ -d $goto ] ; then
			        cd $goto
		        else
			        exit 1
		        fi
                
		        # Folder -> go inside
		    elif [[ -d "$choice" ]] ; then
		        cd "$choice"
		        
		        # .. -> go up
		    elif [ "$choice" == ".." ] ; then
		        cd ..
                
		        # [Open] -> open current dir in $fm
		    elif [ "$choice" == "[Open]" ] ; then
		        echo $PWD
		        setsid setsid $fm "$PWD"
		        unset file
		        exit 0
		        # File -> open
		    else
		        exec $open $choice
		        unset file
		    fi
	    fi
	done
	;;
    
esac



