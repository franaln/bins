#!/bin/bash

# Sherlock
#
# Usage: sherlock [option] or sherlock
# Dependecies: dmenu patched with the qxyw patch


# sherlock config
cachedir="$HOME/.cache/sherlock"
open="open"
filemanager="nautilus"
console="gnome-terminal"
browser="chromium"

# dmenu config
font=Cantarell-12
sf_color=#ffffff # selected text
sb_color=#427fed # selected background
nf_color=#ffffff # normal text
nb_color=#242424 # normal background
height=28
lines=5

# position for dmenu (centered in the screen)
xres=$(xdpyinfo | grep 'dimensions:' | awk '{print $2}' | cut -dx -f1)
width=$[$xres / 4]
xpos=$[$xres / 2 - $width / 2]
yres=$(xdpyinfo | grep 'dimensions:' | awk '{print $2}' | cut -dx -f2)
ypos=$[$yres / 2 - $height*$lines / 2]

# executes dmenu. takes prompt as argument
xdmenu()
{
    dmenu -i -l "$lines" -fn "$font" -sf "$sf_color" -sb "$sb_color" -nf "$nf_color" -nb "$nb_color" -h "$height" -w "$width" -y "$ypos" -x "$xpos" -p $1
}

## Open apps. Show recent apps first
run_apps() {

    max_recent=50 # Number of recent commands to track
    recent_cache="$cachedir/apps_recent"
    rest_cache="$cachedir/apps_all"

    mkdir -p $cachedir
    touch $recent_cache

    IFS=:
    if stest -dqr -n "$rest_cache" $PATH; then
        stest -flx $PATH | sort -u | grep -vf "$recent_cache" > "$rest_cache"
    fi

    IFS=" "
    cmd=$(cat "$recent_cache" "$rest_cache" | xdmenu "apps") || exit

    if ! grep -qx "$cmd" "$recent_cache" &> /dev/null; then
        grep -vx "$cmd" "$rest_cache" > "$rest_cache.$$"
        mv "$rest_cache.$$" "$rest_cache"
    fi
    echo "$cmd" > "$recent_cache.$$"
    grep -vx "$cmd" "$recent_cache" | head -n "$max_recent" >> "$recent_cache.$$"
    mv "$recent_cache.$$"  "$recent_cache"

    ($cmd | ${SHELL:-"/bin/sh"} &)
}

## Run command
run_cmd() {

}

## Power options
run_power() {
    power_opts=("lock" "logout" "suspend" "poweroff" "reboot" "hibernate")

    choice=$(printf "%s\n" "${power_opts[@]}" |  xdmenu "power")

    if [ "$choice" = "" ] ; then
        exit 1
    elif [ "$choice" = "logout" ] ; then
        openbox --exit
    elif [ "$choice" = "lock" ] ; then
        slimlock
        exit 0
    else
        systemctl $choice
        exit 0
    fi
}

## Calculator
run_calc() {
    result=$(xdmenu "calc" | xargs echo | calc | sed "s/\t//g")

    if [ "$result" != "" ] ; then
        echo $result | xdmenu "result"
        exit 0
    else
        exit 1
    fi
}

## Search files
search() {
    input=$(xdmenu "search")

    selected=""
    if [ "$input" != '' ] ; then
        selected=$(echo "$input" | locate -e -r "$input" | xdmenu "result" )
    else
        return 1
    fi

    if [ "$selected" != "" ] ; then
        ${open} "${selected}"
    else
        return 0
    fi
}

run_search() {
    status=0
    while [ $status ] ; do
        search
        status=$?
    done
}

## Screen/VGA/HDMI options
run_screen() {

    devices=$(xrandr -q | grep [[:upper:]]1)

    availableopts="Laptop only"

    if [[ $devices == *"VGA1 connected"* ]] ; then
        availableopts+="\nVGA only\nLaptop and VGA"
    fi

    if [[ $devices == *"HDMI1 connected"* ]] ; then
        availableopts+="\nHDMI only\nLaptop and HDMI"
    fi

    choice=$(echo -e $availableopts | xdmenu "screens")

    case "$choice" in
        "Laptop only")
            xrandr --output eDP1 --auto
            xrandr --output HDMI1 --off
            xrandr --output VGA1  --off
            ;;
        "VGA only")
            xrandr --output VGA1  --auto
            xrandr --output eDP1  --off
            xrandr --output HDMI1 --off
            ;;
        "HDMI only")
            xrandr --output HDMI1 --auto
            xrandr --output VGA1  --off
            xrandr --output eDP1  --off
            ;;
        "Laptop and VGA")
            xrandr --output VGA1 --auto --primary --output eDP1 --auto --right-of VGA1
            xrandr --output HDMI1 --off
            ;;
        "Laptop and HDMI")
            xrandr --output eDP1  --auto
            xrandr --output HDMI1 --auto
            xrandr --output VGA1  --off
            ;;
    esac
}


# Explore files
run_explore() {
    cd "$HOME"

    choice=1
    while [ "$choice" ]; do

        ls $PWD

        choice="$((echo ".." ; ls $PWD ; echo "[Open]") | xdmenu "[$(basename $(pwd))]")"

        #choice=${choice/" "/"\ "}
        echo "$choice"

        if [ "$choice" ] ; then

            # change dir by hand
            if [[ "$choice" == "cd "* ]] ; then
                goto=$(echo $choice | cut -d ' ' -f 2)

                if [ -d $goto ] ; then
                    cd $goto
                else
                    exit 1
                fi

            # Folder -> go inside
            elif [[ -d "$choice" ]] ; then
                cd "$choice"

            # .. -> go up
            elif [ "$choice" == ".." ] ; then
                cd ..

            # [Open] -> open current dir in $fm
            elif [ "$choice" == "[Open]" ] ; then
                setsid $filemanager "$PWD"
                unset file
                return

            # File -> open
            else
                $open $choice
                unset file
                exit 0
            fi
        fi
    done
}

# Search in google
run_google() {

    GS=$(xsel -o | xdmenu "google")

    if [ "$GS" != "" ] ; then
        $browser  http://www.google.com.ar/search?q="$GS"
        wmctrl -a $browser
    else
        return 0
    fi
}

    # mount)

    #     choice=$(cat /proc/partitions | grep -o sd[[:alpha:]] | grep -v major | grep -v "sda" | xdmenu "mount")

    #   if [[ $choice == "" ]] ; then
    #       exit 1
    #   else
    #         mkdir -p /media/$choice
    #       mount -U 1000 $choice /media/$choice
    #     fi
    #     ;;



run_umount() {

    #     usb=$(mount | awk '$3 ~ /\/media\// || /\/mnt\// { print $3 }' | xdmenu "umount")

    #     if [[ "$usb" == "" || ! -d "$usb" ]]; then
    #         exit 1
    #     fi

    #     if umount "$usb"; then
    #         notify-send "You can now safely remove $usb"
    #     else
    #         notify-send "Some apps are using $usb"
    #     fi


    target=( $(awk '/media\/[\^A-Z]/ {print $3}' <(mount)) )
    #shares=(Safebox Scout Sentinel)

    checkbusy() {
        grep "PID" <(lsof +d "$target" &>/dev/null)
        if [[ $? -eq 0 ]]; then
            printf "%s\n" "${target##*/} busyâ€¦"
            exit 1
        fi
    }

    exstatus() {
        if [[ $? -eq 0 ]]; then
            printf "%s\n" "${target##*/} unmountedâ€¦"
        else
            printf "%s\n" "Failed to unmount."
        fi
    }

    # check for multiple devices
    if (( "${#target[@]}" > 1 )); then
        choice=$(echo $target | xmenu "umount")
    fi

    # check for share
    for drive in "${shares[@]}"; do
        if [[ "$drive" = "${target##*/}" ]]; then
            share="$drive"
        fi
    done

    # options per filesystem
    if [[ -n "$target" ]]; then
        for drive in "${shares[@]}"; do
            if [[ "$drive" = "${target##*/}" && "${target##*/}" = Safebox ]]; then
                cmd=$(sudo safebox close)
            elif [[ "$drive" = "${target##*/}" ]]; then
                cmd=$(sudo umount "$target")
        else
                cmd=$(udiskie-umount -d "$target" &>/dev/null)
            fi
        done
    # do it
        checkbusy
        # flush to disk
        /usr/bin/sync && $cmd
        exstatus
    else
    printf "%s\n" "No drive mounted!"
    fi
}

option=""

# If there is no input show options...
if [ $# -eq 0 ] ; then
    opts=("apps" "google" "explore" "power" "screen" "search" "calc")

    choice=$(printf "%s\n" "${opts[@]}" | xdmenu "sherlock")
    if [ "$choice" == "" ] ; then
        exit 1
    else
        option=$choice
    fi

# Else go to the correspondig option
else
    option=$1
fi

case "$option" in
    apps)    run_apps    ;;
    cmd)     run_cmd     ;;
    power)   run_power   ;;
    calc)    run_calc    ;;
    search)  run_search  ;;
    screen)  run_screen  ;;
    explore) run_explore ;;
    google)  run_google  ;;
esac
