#! /usr/bin/env python3

import os
import re
import sys
import shutil
import argparse
import subprocess as sp
from datetime import datetime

def find_tex_file():
    tex_files = []
    for f in os.listdir('.'):
        if f.startswith('.'):
            continue
        if f.endswith('.tex'):
            tex_files.append(f)

    if len(tex_files) == 1:
        return tex_files[0]
    else:
        for f in tex_files:
            try:
                tex = open(f).read()
                if r'\documentclass' in tex:
                    return f
            except:
                continue
    return None


def get_mtime(fname):
    return os.path.getmtime(fname)


def get_dependence(fname):
    dependence = []
    for line in open(fname):
        line = line.replace('\n', '')

        dep = re.match(r'\\input{(.*)}', line)
        if dep is not None:
            dep = dep.groups()[0]

            if not '.' in dep:
                dep += '.tex'
            dependence.append(dep)
            continue

        dep = re.match(r'\\include{(.*)}', line)
        if dep is not None:
            dep = dep.groups()[0]
            print(dep)
            if not '.' in dep:
                dep += '.tex'
            dependence.append(dep)
            continue

    return dependence


# Colorize LaTeX output.
C_WARNING = '\033[93m'
C_ERROR   = '\033[0;31m'
C_INFO    = '\033[0;32m'
C_RESET   = '\033[0m'

def bytes_to_human(num):
    num = int(num)
    for unit in ['','K','M','G','T','P','E','Z']:
        if abs(num) < 1024.0:
            return "%3.1f%sB" % (num, unit)
        num /= 1024.0
    return "%.1f%sB" % (num, 'Y')


def colorize_latex_output(logfile):

    try:
        enc='iso-8859-15'
        log = open(logfile, 'r', encoding=enc).read().split('\n')
    except UnicodeDecodeError as e:
        raise

    line_error = re.compile('^\./(\w*.tex)\:(\d*)\: (.*)')

    n_warning = 0
    n_error = 0
    show_warnings = args.debug
    for i, line in enumerate(log):

        if 'Output written on' in line:
            sline = line.split()

            name = sline[3]
            pages = sline[4][1:]
            size = bytes_to_human(sline[6])

            msg = '** Output written on %s. %s pages, %s, %s warnings, %s errors.' % (name[8:], pages, size, n_warning, n_error)
            print(C_INFO + msg + C_RESET)

        elif 'No pages of output' in line:
            print(C_INFO + line + C_RESET)
        elif 'no output PDF file produced!' in line:
            print(C_ERROR + line + C_RESET)

        if 'Underfull' in line or 'Overfull' in line or 'Warning:' in line:
            n_warning += 1
            if show_warnings:
                print(C_WARNING + line + C_RESET)

        if '*** (job aborted, no legal \end found)' in line:
            print(C_ERROR + line + C_RESET)
            n_error += 1

        le = line_error.match(line)
        if le:
            print(C_ERROR + '%s (in %s, line %s)' % (le.groups()[2], le.groups()[0], le.groups()[1]) + C_RESET)
            n_error += 1


def compile_latex(name):

    texfile = name + '.tex'

    print('Compiling %s' % texfile)

    os.system('mkdir -p .clatex')

    if args.only:
        filecmd = r'"\includeonly{%s}\input{%s}"' % (args.only, texfile)
    else:
        filecmd = texfile

    if args.verbose:
        pdflatex_cmd = 'pdflatex -output-directory=.clatex -file-line-error %s' % filecmd
    else:
        pdflatex_cmd = 'pdflatex -output-directory=.clatex -interaction=batchmode -file-line-error --shell-escape %s > /dev/null' % filecmd

    st = os.system(pdflatex_cmd)

    if st == 1:
        print('error')
        return 1

    if args.bibtex:
        pwd = os.getcwd()
        os.chdir('.clatex')
        bibtex_cmd = 'bibtex %s.aux' % name
        os.system(bibtex_cmd)
        os.chdir(pwd)

    if not args.fast:
        os.system(pdflatex_cmd)
        os.system(pdflatex_cmd)

    os.system('cp .clatex/%s.pdf %s.pdf' % (name, name))

    colorize_latex_output('.clatex/%s.log' % name)


def convert_image(fname):
    iname = fname
    oname = fname[:-4] + '.pdf'
    cmd = 'convert %s %s' % (iname, oname)
    os.system(cmd)


def crop_pdf(pdffile):
    os.system('pdfcrop {0} {1}'.format(tmp_pdf, pdf_path))


def clean(fname):
    try:
        os.unlink(fname)
    except FileNotFoundError:
        pass
    except IsADirectoryError:
        shutil.rmtree(fname)


def clean_all(main_name):
    clean(main_name+'.pdf')
    clean('.clatex')


def slides_from_images():

    header = r"""
\documentclass[center,10pt,cm]{beamer}

% basic style
\renewcommand\familydefault{\rmdefault}
\setbeamercolor*{frametitle}{bg=white,fg=black}
\setbeamertemplate{navigation symbols}{}

\begin{document}
\centering

   """

    footer = r"""

\end{document}
"""
    body = ""
    for img in sorted(os.listdir('.')):

        if not img.endswith('.pdf'):
            continue

        title = img[:-4].replace('_', '\_')

        body += r"""
\begin{frame}{%s}
    \includegraphics[width=0.9\textwidth,height=0.9\textheight,keepaspectratio]{%s}
\end{frame}
""" % (title, img)

    if not body:
        return None

    return header + body + footer



def main():

    parser = argparse.ArgumentParser()

    parser.add_argument('texfile', nargs='?', help='')
    parser.add_argument('-f', dest='force', action='store_true', help='force compilation')
    parser.add_argument('-c', dest='clean', action='store_true', help='clean all')
    parser.add_argument('-g', dest='debug', action='store_true', help='show warnings')
    parser.add_argument('-o', dest='open', action='store_true', help='open pdf')
    parser.add_argument('-v', dest='verbose', action='store_true', help='show latex output')
    parser.add_argument('-b', dest='bibtex', action='store_true', help='compile bibliography using bibtex')
    parser.add_argument('-a', dest='fast', action='store_true', help='compile only once')
    parser.add_argument('-j', dest='only', default='', help='inlcude only')

    global args
    args = parser.parse_args()

    if args.texfile is not None:
        main_tex = args.texfile
    else:
        main_tex = find_tex_file()

    if main_tex is None or not main_tex.endswith('.tex'):

        if not os.listdir('.'):
            parse_args.print_usage()
            return 1

        # try to create slides from pdf images
        tex = slides_from_images()

        if tex is None:
            parser.print_usage()
            return 1

        with open('slides.tex', 'w+') as f:
            f.write(tex)

        main_tex = 'slides.tex'


    main_name = main_tex.replace('.tex', '')
    main_pdf = main_name + '.pdf'

    if args.clean:
        clean_all(main_name)
        return

    if args.force or args.only:
        clean_all(main_name)

    # if args.only:
    #     for f in args.only.split(','):
    #         clean('.clatex/'+f+'.aux')

    need_compile = False
    if not os.path.isfile(main_pdf):
        need_compile = True
    else:
        main_pdf_time = datetime.fromtimestamp(get_mtime(main_pdf))
        main_tex_time = datetime.fromtimestamp(get_mtime(main_tex))

        diff = (main_tex_time-main_pdf_time).total_seconds()
        if diff > 0:
            need_compile = True
        else:
            for dep in get_dependence(main_tex):
                dep_time = datetime.fromtimestamp(get_mtime(dep))
                print(main_pdf_time, dep, dep_time)
                if (main_pdf_time - dep_time).total_seconds() < 0:
                    need_compile = True
                    break

    if need_compile:
        compile_latex(main_name)
    else:
        print(C_INFO + 'nothing to be done' + C_RESET)

    if args.open:
        os.system('open %s' % main_pdf)


if __name__ == '__main__':
    main()
