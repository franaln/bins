#!/usr/bin/env python2
# Battery monitor for openbox

from gi.repository import Gtk, Notify
import gobject
import subprocess

ACPI_CMD = 'acpi'
TIMEOUT = 5

class BatteryMonitor:
    def __init__(self):
        self.statusicon = Gtk.StatusIcon()
        self.statusicon.connect("popup-menu", self.right_click_event)

        Notify.init("Battery Monitor")

        # first time
        info = self.get_battery_info()
        self.curr_state = info['state']
        self.curr_percentage  = info['percentage']
        self.critical_level = False
        self.low_level = False
        self.update_icon(info['state'], info['percentage'], info['tooltip'])
        gobject.timeout_add_seconds(TIMEOUT, self.update_status)
        
    def get_battery_info(self):
        text = subprocess.check_output(ACPI_CMD).strip('\n')
        if not 'Battery' in text:
            return {'state':"Unknown", 'percentage':0, 'tooltip':"" }
        data = text.split(',')
        return {'state':data[0].split(':')[1].strip(' '),
                'percentage':int(data[1].strip(' %')),
                'tooltip': text.split(':',1)[1][1:]
            }

    def update_status(self):
        info = self.get_battery_info()

        if info['state'] == self.curr_state and info['percentage'] == self.curr_percentage:
            return True
        
        self.update_icon(info['state'], info['percentage'], info['tooltip'])
        
        self.show_notification(info['state'], info['percentage'])       

        self.curr_state = info['state']
        self.curr_percentage = info['percentage']
        return True

    def update_icon(self, state, percentage, tooltip):
        icon_name = self.get_icon_name(state, percentage)
        self.statusicon.set_from_icon_name(icon_name)
        self.statusicon.set_tooltip_text(tooltip)
        return True

    def get_icon_name(self, state, percentage):
        if state == 'Discharging':
            if percentage < 10:
                return 'battery_empty'
            elif percentage < 20:
                return 'battery_caution'
            elif percentage < 40:
                return 'battery_low'
            elif percentage < 60:
                return 'battery_two_thirds'
            elif percentage < 75:
                return 'battery_third_fouth'
            else:
                return 'battery_full'
        elif state == 'Charged':
            return 'battery_charged'
        elif state == 'Unknown':
            return 'dialog-question'
        else:
            return 'battery_plugged'

    def show_notification(self, state, percentage):
        noti_text = ""
        noti_icon = ""
        if state == 'Discharging' and not self.curr_state == 'Discharging':
            noti_text = 'adaptor unplugged - battery discharging'
            noti_icon = 'dialog-information'
        elif state == 'Charging' and not self.curr_state == 'Charging':
            noti_text = 'adaptor plugged :)'
            noti_icon = 'dialog-information'
            
        if percentage <= 10 and not self.low_level:
            noti_text = "charge is under 10%. plug the adaptor"
            noti_icon = "dialog-information"
            self.low_level = True
        elif percentage < 5 and not self.critical_level:
            noti_text = "charge is under 5%. plug the adaptor now!!!"
            noti_icon = "dialog-information"
            self.critical_level = True

        if noti_text != "" and noti_icon != "":
            noti = Notify.Notification.new("Battery Monitor",noti_text, noti_icon)
            noti.show ()

    def right_click_event(self, icon, button, time):
        self.menu = Gtk.Menu()

        quit = Gtk.MenuItem()
        quit.set_label("Quit")
        quit.connect("activate", Gtk.main_quit)

        self.menu.append(quit)
        self.menu.show_all()

        def pos(menu, icon):
            return (Gtk.StatusIcon.position_menu(menu, icon))

        self.menu.popup(None, None, pos, self.statusicon, button, time)
            
if __name__ == "__main__":
    try:
        BatteryMonitor()
        Gtk.main()
    except KeyboardInterrupt:
        pass




