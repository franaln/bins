#!/usr/bin/env python2
# Battery monitor for openbox

from gi.repository import Gtk, Notify
import gobject
import subprocess

ACPI_CMD = 'acpi'
TIMEOUT = 2

class BatteryMonitor:
    def __init__(self):
        self.statusicon = Gtk.StatusIcon()
        self.statusicon.connect("popup-menu", self.right_click_event)

        Notify.init("Battery Monitor")

        self.update_icon()
        gobject.timeout_add_seconds(TIMEOUT, self.update_icon)
        
    def get_battery_info(self):
        text = subprocess.check_output(ACPI_CMD).strip('\n')
        if not 'Battery' in text:
            return {'state':"Unknown", 'percentage':0, 'tooltip':"" }
        data = text.split(',')
        return {'state':data[0].split(':')[1].strip(' '),
                'percentage':int(data[1].strip(' %')),
                'tooltip': text.split(':',1)[1][1:]
            }

    def get_icon_name(self, state, percentage):
        if state == 'Discharging':
            if percentage < 10:
                return 'battery_empty'
            elif percentage < 20:
                return 'battery_caution'
            elif percentage < 40:
                return 'battery_low'
            elif percentage < 60:
                return 'battery_two_thirds'
            elif percentage < 75:
                return 'battery_third_fouth'
            else:
                return 'battery_full'
        elif state == 'Charged':
            return 'battery_charged'
        elif state == 'Unknown':
            return 'dialog-question'
        else:
            return 'battery_plugged'

    def show_notification(self, state, percetage):
        
        if state == 'Discharging':
            if percentage < 10:
                noti_text = "charge is under 10%. plug the laptop!!!"
                noti_icon = "dialog-information"
            # if percentage < 10:
            #     noti_text = "charge is under 10%. plug the laptop!!!"
            #     noti_icon = "dialog-information"
        elif state == 'Full':
            noti_text = "ini"
            noti_icon = "dialog_information"
        
        noti = Notify.Notification.new("Battery Monitor",noti_text, noti_icon)
        noti.show ()

    def update_icon(self):
        info = self.get_battery_info()
        icon_name = self.get_icon_name(info['state'], info['percentage'])
        self.statusicon.set_from_icon_name(icon_name)
        self.statusicon.set_tooltip_text(info['tooltip'])
        self.show_notification(info['state'], info['percentage'])
        return True

    def right_click_event(self, icon, button, time):
        self.menu = Gtk.Menu()

        quit = Gtk.MenuItem()
        quit.set_label("Quit")
        quit.connect("activate", Gtk.main_quit)

        self.menu.append(quit)
        self.menu.show_all()

        def pos(menu, icon):
            return (Gtk.StatusIcon.position_menu(menu, icon))

        self.menu.popup(None, None, pos, self.statusicon, button, time) 
            
if __name__ == "__main__":
    try:
        BatteryMonitor()
        Gtk.main()
    except KeyboardInterrupt:
        pass




